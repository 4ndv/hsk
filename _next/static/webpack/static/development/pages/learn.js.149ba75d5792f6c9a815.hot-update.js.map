{"version":3,"file":"static/webpack/static/development/pages/learn.js.149ba75d5792f6c9a815.hot-update.js","sources":["webpack:///./components/LearnCard.js"],"sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Card, CardBody, Button, Row, Col, Badge\n} from 'reactstrap'\n\nimport { useHotkeys } from 'react-hotkeys-hook'\n\nimport Hider from './Hider'\n\nconst renderQuestion = (config, question, type) => {\n  const { hidePinyin } = config\n\n  switch (type) {\n    case 'characters-pinyin':\n      return <div className=\"question\">{question.simplified}</div>\n    case 'pinyin-characters':\n      return <div className=\"question\">{question.pinyin}</div>\n    case 'characters-translation':\n      return (\n        <>\n          <div className=\"question\">{question.simplified}</div>\n          <div className=\"comment\">\n            <Hider\n              enabled={hidePinyin}\n              caption=\"Show pinyin\"\n            >\n              {question.pinyin}\n            </Hider>\n          </div>\n        </>\n      )\n    case 'translation-characters':\n      return <div className=\"question\">{question.definitions[0]}</div>\n    default:\n      return 'None'\n  }\n}\n\nconst renderAnswerText = (answer, type) => {\n  switch (type) {\n    case 'characters-pinyin':\n      return answer.pinyin\n    case 'pinyin-characters':\n      return answer.simplified\n    case 'characters-translation':\n      return answer.definitions[0]\n    case 'translation-characters':\n      return `${answer.simplified} (${answer.pinyin})`\n    default:\n      return 'None'\n  }\n}\n\nconst LearnCard = (props) => {\n  const { word, submitResult, config } = props\n  const { question, variants, type } = word\n  const [selected, setSelected] = useState([])\n  const [disableAll, setDisableAll] = useState(false)\n\n  const selectAnswer = (index, correct) => {\n    if (disableAll) return null\n\n    const newSelected = [index, ...selected]\n\n    console.log(newSelected)\n\n    if (correct) {\n      submitResult({ word, selected: newSelected })\n      setDisableAll(true)\n    }\n\n    setSelected(newSelected)\n\n    return null\n  }\n\n  const skip = () => {\n    if (disableAll) return null\n\n    const newSelected = [0, 1, 2, 3]\n\n    submitResult({ word, selected: newSelected })\n\n    setSelected(newSelected)\n    setDisableAll(true)\n\n    return null\n  }\n\n  useHotkeys('1,2,3,4,space', (event, { key }) => {\n    console.log(key, selected)\n\n    if (key === 'space') {\n      skip()\n    } else {\n      const index = +key - 1\n\n      const correct = variants.findIndex((item) => question.simplified === item.simplified)\n\n      selectAnswer(index, index === correct)\n    }\n  })\n\n  const renderAnswer = (index, variant, correct) => {\n    const isSelected = selected.includes(index)\n    const correctColor = correct ? 'success' : 'danger'\n    const color = !isSelected ? 'secondary' : correctColor\n\n    return (\n      <Col lg={6} md={12} sm={12} className=\"mb-4\">\n        <Button\n          block\n          color={color}\n          disabled={isSelected}\n          key={index}\n          onClick={() => selectAnswer(index, correct)}\n          size=\"lg\"\n        >\n          <Badge color=\"dark\">{index + 1}</Badge>\n          {' '}\n          {renderAnswerText(variant, type)}\n        </Button>\n      </Col>\n    )\n  }\n\n  return (\n    <>\n      <Card className=\"learn-card mb-4\">\n        <CardBody>\n          <div className=\"question\">\n            {renderQuestion(config, question, type)}\n          </div>\n        </CardBody>\n      </Card>\n      <Row>\n        {\n          variants.map(\n            (variant, i) => renderAnswer(\n              i,\n              variant,\n              question.simplified === variant.simplified\n            )\n          )\n        }\n        <Col lg={12}>\n          <Button\n            block\n            color=\"warning\"\n            onClick={() => skip()}\n            size=\"lg\"\n          >\n            <Badge color=\"dark\">Space</Badge>\n            {' '}\n            Skip\n          </Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nLearnCard.propTypes = {\n  word: PropTypes.object.isRequired,\n  submitResult: PropTypes.func.isRequired,\n  config: PropTypes.object.isRequired\n}\n\nexport default LearnCard\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}