{"version":3,"file":"static/webpack/static/development/pages/learn.js.8eabd558a47082651513.hot-update.js","sources":["webpack:///./components/LearnCard.js"],"sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Card, CardBody, Button, Row, Col\n} from 'reactstrap'\n\nconst renderQuestion = (question, type) => {\n  switch (type) {\n    case 'characters-pinyin':\n      return question.simplified\n    case 'pinyin-characters':\n      return question.pinyin\n    case 'characters-translation':\n      return question.simplified\n    case 'translation-characters':\n      return question.definitions[0]\n    default:\n      return 'None'\n  }\n}\n\nconst renderAnswerText = (answer, type) => {\n  switch (type) {\n    case 'characters-pinyin':\n      return answer.pinyin\n    case 'pinyin-characters':\n      return answer.simplified\n    case 'characters-translation':\n      return answer.definitions[0]\n    case 'translation-characters':\n      return `${answer.simplified} (${answer.pinyin})`\n    default:\n      return 'None'\n  }\n}\n\nconst LearnCard = (props) => {\n  const { word, submitResult } = props\n  const { question, variants, type } = word\n  const [selected, setSelected] = useState([])\n\n  const selectAnswer = (index, correct) => {\n    const newSelected = [index, ...selected]\n\n    if (correct) return submitResult(newSelected)\n\n    setSelected(newSelected)\n\n    return null\n  }\n\n  const renderAnswer = (index, variant, correct) => {\n    const isSelected = selected.includes(index)\n    const correctColor = correct ? 'success' : 'danger'\n    const color = !isSelected ? 'secondary' : correctColor\n\n    return (\n      <Col lg={6} md={12} sm={12} className=\"mb-4\">\n        <Button\n          block\n          color={color}\n          disabled={isSelected}\n          key={index}\n          onClick={() => selectAnswer(index, correct)}\n          size=\"lg\"\n        >\n          {renderAnswerText(variant, type)}\n        </Button>\n      </Col>\n    )\n  }\n\n  return (\n    <>\n      <Card className=\"learn-card mb-4\">\n        <CardBody>\n          <div className=\"question\">\n            {renderQuestion(question, type)}\n          </div>\n        </CardBody>\n      </Card>\n      <Row>\n        {\n          variants.map(\n            (variant, i) => renderAnswer(\n              i,\n              variant,\n              question.simplified === variant.simplified\n            )\n          )\n        }\n      </Row>\n    </>\n  )\n}\n\nLearnCard.propTypes = {\n  word: PropTypes.object.isRequired,\n  submitResult: PropTypes.func.isRequired\n}\n\nexport default LearnCard\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}