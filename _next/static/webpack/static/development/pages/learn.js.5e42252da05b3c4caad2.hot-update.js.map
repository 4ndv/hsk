{"version":3,"file":"static/webpack/static/development/pages/learn.js.5e42252da05b3c4caad2.hot-update.js","sources":["webpack:///./components/Learn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport Router from 'next/router'\n\nimport {\n  Button, ListGroup, ListGroupItem, Progress\n} from 'reactstrap'\n\nimport LearnCard from './LearnCard'\nimport Link from './Link'\n\nconst renderMistakes = (mistakes) => {\n  if (mistakes.length === 0) return null\n\n  const mistakesElements = mistakes.map((mistake) => {\n    const { question } = mistake\n\n    return (\n      <ListGroupItem key={question.id}>\n        <div>\n          <b>Character: </b>\n          {question.simplified}\n        </div>\n        <div>\n          <b>Pinyin: </b>\n          {question.pinyin}\n        </div>\n        <div>\n          <b>Definitions: </b>\n          {question.definitions.join('; ')}\n        </div>\n      </ListGroupItem>\n    )\n  })\n\n  return (\n    <>\n      <h3>Mistakes</h3>\n      <ListGroup>\n        {mistakesElements}\n      </ListGroup>\n    </>\n  )\n}\n\nconst Learn = (props) => {\n  const { data, config } = props\n  const [position, setPosition] = useState(0)\n  const [correct, setCorrect] = useState(0)\n  const [errors, setErrors] = useState([])\n  const [finished, setFinished] = useState(false)\n\n  console.log(data)\n\n  useEffect(() => {\n    setPosition(0)\n    setCorrect(0)\n    setErrors([])\n    setFinished(false)\n  }, [config])\n\n  const submitResult = (result) => {\n    const { word, selected } = result\n\n    setTimeout(() => {\n      setPosition(position + 1)\n\n      if (selected.length === 1) {\n        setCorrect(correct + 1)\n      } else {\n        setErrors([...errors, word])\n      }\n    }, 500)\n  }\n\n  const finish = () => {\n    setFinished(true)\n  }\n\n  const tryAgain = () => {\n    window.location.reload()\n  }\n\n  const retryIncorrect = () => {\n    Router.push({\n      pathname: '/learn',\n      query: {\n        config: JSON.stringify({\n          ...config,\n          forceIds: errors.map((error) => error.id)\n        })\n      }\n    })\n  }\n\n  if (position >= data.length || finished) {\n    return (\n      <>\n        <h3>\n          <span role=\"img\" aria-label=\"hooray\">ðŸŽ‰</span>\n          {' '}\n          You&apos;ve answered all the questions!\n        </h3>\n        <p>\n          Correct answers:\n          {' '}\n          {correct}\n        </p>\n        <p>\n          Incorrect answers:\n          {' '}\n          {errors.length}\n        </p>\n        <p>\n          Total answers:\n          {' '}\n          {correct + errors.length}\n        </p>\n        <p>\n          <Button onClick={tryAgain}>Try again</Button>\n          {errors.length > 0 ? <Button className=\"ml-1\" onClick={retryIncorrect}>Retry incorrect</Button> : null}\n          <Link href=\"/\"><Button className=\"ml-1\">Return to home</Button></Link>\n        </p>\n        {renderMistakes(errors)}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Progress multi className=\"mb-1\">\n        <Progress bar color=\"success\" value={(100.0 / data.length) * correct} />\n        <Progress bar color=\"danger\" value={(100.0 / data.length) * errors.length} />\n      </Progress>\n      <LearnCard word={data[position]} key={position} submitResult={submitResult} config={config} finish={finish} />\n    </>\n  )\n}\n\nLearn.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  config: PropTypes.object.isRequired\n}\n\nexport default Learn\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAFA;AADA;AAFA;AASA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}